#include <stdlib.h>
#include <ladspa.h>

#define CROSSOVER_BAND_COUNT {{ bands|count }}
{%- set bufferCandidates = [] %}
{%- for band in bands %}
{%- if bufferCandidates.append(band.delay + band.data|length) %}{% endif %}
{%- endfor %}
#define CROSSOVER_BUFFER_SIZE {{ bufferCandidates|max }}

struct {
  unsigned long delay;
  unsigned long coefficientCount;
  float * coefficientVector;
} crossover[] = {
  {%- for band in bands %}
  {
    {{ band.delay }}, {{ band.data|length }}, (float[]){
      {%- for coefficient in band.data %}
      {{ coefficient }},
      {%- endfor %}
    }
  },
  {%- endfor %}
};

typedef struct bufferElement {
  LADSPA_Data value;
  struct bufferElement * previous;
  struct bufferElement * next;
  struct bufferElement * delayPoints[CROSSOVER_BAND_COUNT];
} bufferElement;

typedef struct {
  LADSPA_Data * inputBuffer;
  LADSPA_Data * outputBuffers[CROSSOVER_BAND_COUNT];
  struct bufferElement * entrypoint;
  struct bufferElement circleBuffer[CROSSOVER_BUFFER_SIZE];
} crossoverInstance;

LADSPA_Handle instantiate (
  const LADSPA_Descriptor * descriptor,
  unsigned long sampleRate
) {
  crossoverInstance * instance;
  struct bufferElement * bufferCurrent;
  struct bufferElement * bufferBarrier;
  unsigned long bandIndex;

  instance = (crossoverInstance *)malloc(sizeof(crossoverInstance));
  for (
    bufferCurrent = instance->circleBuffer,
      bufferBarrier = instance->circleBuffer + CROSSOVER_BUFFER_SIZE;
    bufferCurrent < bufferBarrier;
    bufferCurrent++
  ) {
    for (
      bandIndex = 0;
      bandIndex < CROSSOVER_BAND_COUNT;
      bandIndex++
    ) {
      bufferCurrent->delayPoints[bandIndex] = bufferCurrent -
        crossover[bandIndex].delay;
      if (
        bufferCurrent->delayPoints[bandIndex] <
          instance->circleBuffer
      ) {
        bufferCurrent->delayPoints[bandIndex] +=
          CROSSOVER_BUFFER_SIZE;
      }
    }
    if (bufferCurrent == instance->circleBuffer) {
      bufferCurrent->previous = bufferBarrier - 1;
      bufferCurrent->next = bufferCurrent + 1;
      continue;
    }
    if (bufferCurrent == bufferBarrier - 1) {
      bufferCurrent->next = instance->circleBuffer;
      bufferCurrent->previous = bufferCurrent - 1;
      continue;
    }
    bufferCurrent->next = bufferCurrent + 1;
    bufferCurrent->previous = bufferCurrent - 1;
  }
  instance->entrypoint = instance->circleBuffer;
  return (LADSPA_Handle)instance;
}

void activate (
  LADSPA_Handle handle
) {
  crossoverInstance * instance;
  struct bufferElement * bufferCurrent;
  struct bufferElement * bufferBarrier;

  instance = (crossoverInstance *)handle;
  for (
    bufferCurrent = instance->circleBuffer,
      bufferBarrier = instance->circleBuffer + CROSSOVER_BUFFER_SIZE;
    bufferCurrent < bufferBarrier;
    bufferCurrent++
  ) {
    bufferCurrent->value = 0;
  }
}

void connect_port (
  LADSPA_Handle handle,
  unsigned long port,
  LADSPA_Data * dataLocation
) {
  crossoverInstance * instance;

  instance = (crossoverInstance *)handle;
  if (port == 0) {
    instance->inputBuffer = dataLocation;
  } else if (0 < port && port <= CROSSOVER_BAND_COUNT) {
    instance->outputBuffers[port - 1] = dataLocation;
  }
}

void run (
  LADSPA_Handle handle,
  unsigned long sampleCount
) {
  crossoverInstance * instance;
  unsigned long sampleIndex;
  unsigned long bandIndex;
  unsigned long coefficientIndex;
  LADSPA_Data accumulator;
  struct bufferElement * bufferCurrent;

  instance = (crossoverInstance *)handle;
  for (
    sampleIndex = 0;
    sampleIndex < sampleCount;
    sampleIndex++
  ) {
    instance->entrypoint->value =
      instance->inputBuffer[sampleIndex];
    for (
      bandIndex = 0;
      bandIndex < CROSSOVER_BAND_COUNT;
      bandIndex++
    ) {
      accumulator = 0;
      bufferCurrent =
        instance->entrypoint->delayPoints[bandIndex];
      for (
        coefficientIndex = 0;
        coefficientIndex < crossover[bandIndex].coefficientCount;
        coefficientIndex++
      ) {
        accumulator += bufferCurrent->value *
          crossover[bandIndex].coefficientVector[coefficientIndex];
        bufferCurrent = bufferCurrent->previous;
      }
      instance->outputBuffers[bandIndex][sampleIndex] =
        accumulator;
    }
    instance->entrypoint = instance->entrypoint->next;
  }
}

void cleanup(
  LADSPA_Handle handle
) {
  free(handle);
}

LADSPA_PortDescriptor portDescriptors[] = {
  LADSPA_PORT_INPUT | LADSPA_PORT_AUDIO,
  {%- for i in range(bands|count) %}
  LADSPA_PORT_OUTPUT | LADSPA_PORT_AUDIO,
  {%- endfor %}
};

const char * portNames[] = {
  "Input",
  {%- for band in bands %}
  "{{ band.name }}",
  {%- endfor %}  
};

LADSPA_PortRangeHint portRangeHints[] = {
  {%- for i in range(bands|count + 1) %}
  {0},
  {%- endfor %}
};

LADSPA_Descriptor crossoverDescriptor = { 
  {{ plugin.uniqueId }},
  "{{ plugin.label }}",
  LADSPA_PROPERTY_HARD_RT_CAPABLE,
  "{{ plugin.name }}",
  "{{ plugin.maker }}",
  "{{ plugin.copyright }}",
  {{ bands|count + 1 }},
  portDescriptors,
  portNames,
  portRangeHints,
  NULL,
  &instantiate,
  &connect_port,
  &activate,
  &run,
  NULL,
  NULL,
  NULL,
  &cleanup,
};

const LADSPA_Descriptor * ladspa_descriptor(unsigned long index) {
  if (index == 0)
    return &crossoverDescriptor;
  return NULL;
}
