#include <stdlib.h>
#include <ladspa.h>

#define CROSSOVER_BAND_COUNT {{ bands|count }}
{%- set bufferCandidates = [] %}
{%- for band in bands %}
{%- if bufferCandidates.append(band.delay + band.data|length) %}{% endif %}
{%- endfor %}
#define CROSSOVER_BUFFER_SIZE {{ bufferCandidates|max }}

struct {
  unsigned long Delay;
  unsigned long CoefficientCount;
  float * CoefficientVector;
} Crossover[] = {
  {%- for band in bands %}
  {
    {{ band.delay }}, {{ band.data|length }}, (float[]){
      {%- for coefficient in band.data %}
      {{ coefficient }},
      {%- endfor %}
    }
  },
  {%- endfor %}
};

typedef struct BufferElement {
  LADSPA_Data Value;
  struct BufferElement * Previous;
  struct BufferElement * Next;
  struct BufferElement * BandDelay[CROSSOVER_BAND_COUNT];
} BufferElement;

typedef struct {
  LADSPA_Data * m_pfInputBuffer;
  LADSPA_Data * m_pfOutputBuffers[CROSSOVER_BAND_COUNT];
  struct BufferElement * m_psEntrypoint;
  struct BufferElement m_psCircleBuffer[CROSSOVER_BUFFER_SIZE];
} CrossoverInstance;

LADSPA_Handle instantiate (
  const LADSPA_Descriptor * Descriptor,
  unsigned long SampleRate
) {
  CrossoverInstance * psCrossoverInstance;
  struct BufferElement * psBufferCurrent;
  struct BufferElement * psBufferBarrier;
  unsigned long BandIndex;

  psCrossoverInstance = (CrossoverInstance *)malloc(sizeof(CrossoverInstance));
  for (
    psBufferCurrent = psCrossoverInstance->m_psCircleBuffer,
      psBufferBarrier = psCrossoverInstance->m_psCircleBuffer + CROSSOVER_BUFFER_SIZE;
    psBufferCurrent < psBufferBarrier;
    psBufferCurrent++
  ) {
    for (
      BandIndex = 0;
      BandIndex < CROSSOVER_BAND_COUNT;
      BandIndex++
    ) {
      psBufferCurrent->BandDelay[BandIndex] = psBufferCurrent -
        Crossover[BandIndex].Delay;
      if (
        psBufferCurrent->BandDelay[BandIndex] <
          psCrossoverInstance->m_psCircleBuffer
      ) {
        psBufferCurrent->BandDelay[BandIndex] +=
          CROSSOVER_BUFFER_SIZE;
      }
    }
    if (psBufferCurrent == psCrossoverInstance->m_psCircleBuffer) {
      psBufferCurrent->Previous = psBufferBarrier - 1;
      psBufferCurrent->Next = psBufferCurrent + 1;
      continue;
    }
    if (psBufferCurrent == psBufferBarrier - 1) {
      psBufferCurrent->Next = psCrossoverInstance->m_psCircleBuffer;
      psBufferCurrent->Previous = psBufferCurrent - 1;
      continue;
    }
    psBufferCurrent->Next = psBufferCurrent + 1;
    psBufferCurrent->Previous = psBufferCurrent - 1;
  }
  psCrossoverInstance->m_psEntrypoint = psCrossoverInstance->m_psCircleBuffer;
  return (LADSPA_Handle)psCrossoverInstance;
}

void activate (
  LADSPA_Handle Instance
) {
  CrossoverInstance * psCrossoverInstance;
  struct BufferElement * psBufferCurrent;
  struct BufferElement * psBufferBarrier;

  psCrossoverInstance = (CrossoverInstance *)Instance;
  for (
    psBufferCurrent = psCrossoverInstance->m_psCircleBuffer,
      psBufferBarrier = psCrossoverInstance->m_psCircleBuffer + CROSSOVER_BUFFER_SIZE;
    psBufferCurrent < psBufferBarrier;
    psBufferCurrent++
  ) {
    psBufferCurrent->Value = 0;
  }
}

void connect_port (
  LADSPA_Handle Instance,
  unsigned long Port,
  LADSPA_Data * DataLocation
) {
  CrossoverInstance * psCrossoverInstance;

  psCrossoverInstance = (CrossoverInstance *)Instance;
  if (Port == 0) {
    psCrossoverInstance->m_pfInputBuffer = DataLocation;
  } else if (0 < Port && Port <= CROSSOVER_BAND_COUNT) {
    psCrossoverInstance->m_pfOutputBuffers[Port - 1] = DataLocation;
  }
}

void run (
  LADSPA_Handle Instance,
  unsigned long SampleCount
) {
  CrossoverInstance * psCrossoverInstance;
  unsigned long lSampleIndex;
  unsigned long lBandIndex;
  unsigned long lCoefficientIndex;
  LADSPA_Data Accumulator;
  struct BufferElement * psBufferCurrent;

  psCrossoverInstance = (CrossoverInstance *)Instance;
  for (
    lSampleIndex = 0;
    lSampleIndex < SampleCount;
    lSampleIndex++
  ) {
    psCrossoverInstance->m_psEntrypoint->Value =
      psCrossoverInstance->m_pfInputBuffer[lSampleIndex];
    for (
      lBandIndex = 0;
      lBandIndex < CROSSOVER_BAND_COUNT;
      lBandIndex++
    ) {
      Accumulator = 0;
      psBufferCurrent =
        psCrossoverInstance->m_psEntrypoint->BandDelay[lBandIndex];
      for (
        lCoefficientIndex = 0;
        lCoefficientIndex < Crossover[lBandIndex].CoefficientCount;
        lCoefficientIndex++
      ) {
        Accumulator += psBufferCurrent->Value *
          Crossover[lBandIndex].CoefficientVector[lCoefficientIndex];
        psBufferCurrent = psBufferCurrent->Previous;
      }
      psCrossoverInstance->m_pfOutputBuffers[lBandIndex][lSampleIndex] =
        Accumulator;
    }
    psCrossoverInstance->m_psEntrypoint = psCrossoverInstance->m_psEntrypoint->Next;
  }
}

void cleanup(
  LADSPA_Handle Instance
) {
  free(Instance);
}

LADSPA_PortDescriptor PortDescriptors[] = {
  LADSPA_PORT_INPUT | LADSPA_PORT_AUDIO,
  {%- for i in range(bands|count) %}
  LADSPA_PORT_OUTPUT | LADSPA_PORT_AUDIO,
  {%- endfor %}
};

const char * PortNames[] = {
  "Input",
  {%- for band in bands %}
  "{{ band.name }}",
  {%- endfor %}  
};

LADSPA_PortRangeHint PortRangeHints[] = {
  {%- for i in range(bands|count + 1) %}
  {0},
  {%- endfor %}
};

LADSPA_Descriptor CrossoverDescriptor = { 
  {{ plugin.uniqueId }},
  "{{ plugin.label }}",
  LADSPA_PROPERTY_HARD_RT_CAPABLE,
  "{{ plugin.name }}",
  "{{ plugin.maker }}",
  "{{ plugin.copyright }}",
  {{ bands|count + 1 }},
  PortDescriptors,
  PortNames,
  PortRangeHints,
  NULL,
  &instantiate,
  &connect_port,
  &activate,
  &run,
  NULL,
  NULL,
  NULL,
  &cleanup,
};

const LADSPA_Descriptor * ladspa_descriptor(unsigned long Index) {
  if (Index == 0)
    return &CrossoverDescriptor;
  return NULL;
}
